generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  String               @id @default(uuid())
  isActive            CompanyStatus        @default(INACTIVE)
  name                String
  documentId          String               @unique
  companyType         CompanyType
  logoUrl             String?
  menus               Menu[]
  orders              Order[]
  sectors             Sector[]
  users               User[]
  catalogItems        MenuItem[]
  Log                 Log[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  PaymentSubscription PaymentSubscription?
  Subscription        Subscription?
}

model PlanTemplate {
  id              String         @id @default(uuid())
  name            License        @unique
  description     String?
  canAccessOrders Boolean
  maxUsers        Int
  maxMenus        Int
  maxItems        Int
  priceMonthly    Int
  apiAccess       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  Subscription    Subscription[]
}

model Subscription {
  id        String  @id @default(uuid())
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  licenseName License
  license     PlanTemplate @relation(fields: [licenseName], references: [name])

  customMaxUsers      Int?
  customMaxMenus      Int?
  custommaxItems      Int?
  customPrice         Int?
  startedAt           DateTime              @default(now())
  expiresAt           DateTime?
  createdAt           DateTime              @default(now())
  PaymentSubscription PaymentSubscription[]
}

model PaymentSubscription {
  id        String  @id @default(uuid())
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  subscription String
  Subscription Subscription @relation(fields: [subscription], references: [id])

  billingStatus  BillingStatus    @default(PENDING)
  priceCents     Int
  currency       String           @default("BRL")
  startedAt      DateTime         @default(now())
  nextBillingAt  DateTime
  trialEndsAt    DateTime?
  canceledAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PaymentInvoice PaymentInvoice[]
}

model PaymentInvoice {
  id             String              @id @default(uuid())
  subscriptionId String
  subscription   PaymentSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  amountCents Int
  paid        Boolean   @default(false)
  paidAt      DateTime?
  dueAt       DateTime
  externalId  String?
  createdAt   DateTime  @default(now())
}

model User {
  id                String         @id @default(uuid())
  email             String
  password          String
  name              String
  role              Role           @default(STAFF)
  documentId String
  company           Company        @relation(fields: [documentId], references: [documentId], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Log               Log[]
  RefreshToken      RefreshToken[]
  isActive          Boolean

  @@unique([email, documentId], name: "email_documentId")
  @@index([documentId, email])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sector {
  id        String   @id @default(uuid())
  name      String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  menus     Menu[]
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name], name: "unique_sector_name_per_company")
}

model Menu {
  id          String           @id @default(uuid())
  name        String
  description String?
  sectorId    String
  sector      Sector           @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  items       MenuItemOnMenu[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  Company     Company?         @relation(fields: [companyId], references: [id])
  companyId   String?

  @@unique([sectorId, name], name: "unique_menu_name_per_sector")
}

model MenuItem {
  id          String           @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  menus       MenuItemOnMenu[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  OrderItem   OrderItem[]

  @@unique([companyId, name], name: "unique_item_name_per_company")
}

model MenuItemOnMenu {
  id          String   @id @default(uuid())
  menuId      String
  itemId      String
  customPrice Float?
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  item        MenuItem @relation(fields: [itemId], references: [id])

  @@unique([menuId, itemId], name: "unique_menu_item_per_menu")
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(PENDING)
  notes     String?
  sectorId  String
  sector    Sector      @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  companyId String
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([status], name: "idx_order_status")
}

model OrderItem {
  id       String   @id @default(uuid())
  orderId  String
  itemId   String
  quantity Int      @default(1)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item     MenuItem @relation(fields: [itemId], references: [id])
}

model Log {
  id          String   @id @default(uuid())
  action      String
  entity      String
  entityId    String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description String?
  createdAt   DateTime @default(now())

  @@index([entity, companyId], name: "idx_log_entity_company")
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum Role {
  OWNER
  ADMIN
  STAFF
  VIEWER
}

enum License {
  BASIC
  PROFESSIONAL
  BUSINESS
}

enum BillingStatus {
  ACTIVE
  PENDING
  TRIAL
  CANCELED
  EXPIRED
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyType {
  RESTAURANT
  CAFE
  BAR
  PUB
  BISTRO
  FOOD_TRUCK
  HOTEL
}
